name: Build (Linux/macOS/Windows)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }} â€¢ ${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        config: [Release]  # add Debug if you want both

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ---------- Linux ----------
      - name: Install Ninja (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y ninja-build
      - name: Configure (Linux)
        if: runner.os == 'Linux'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}
          -DCMAKE_CXX_STANDARD=17
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build -- -k 0 -j 2

      # ---------- macOS ----------
      - name: Install Ninja (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja
      - name: Configure (macOS)
        if: runner.os == 'macOS'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}
          -DCMAKE_CXX_STANDARD=17
      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: cmake --build build -- -k 0 -j 2

      # ---------- Windows (MSYS2 / MinGW-w64 like CLion) ----------
      - name: Setup MSYS2 with MinGW-w64 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja

      - name: Configure (Windows MinGW)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}
          -DCMAKE_C_STANDARD=11
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_CXX_COMPILER=g++

      - name: Build (Windows MinGW)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: cmake --build build -- -j 2

      # ---------- Export target names from CMake cache ----------
      - name: Export target names (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          CLIENT=$(cmake -LA -N build | awk -F= '/^CLIENT_TARGET_NAME:STRING=/{print $2}')
          SERVER=$(cmake -LA -N build | awk -F= '/^SERVER_TARGET_NAME:STRING=/{print $2}')
          echo "CLIENT_TARGET_NAME=$CLIENT" >> $GITHUB_ENV
          echo "SERVER_TARGET_NAME=$SERVER" >> $GITHUB_ENV

      - name: Export target names (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          CLIENT=$(cmake -LA -N build | awk -F= '/^CLIENT_TARGET_NAME:STRING=/{print $2}')
          SERVER=$(cmake -LA -N build | awk -F= '/^SERVER_TARGET_NAME:STRING=/{print $2}')
          echo "CLIENT_TARGET_NAME=$CLIENT" >> $GITHUB_ENV
          echo "SERVER_TARGET_NAME=$SERVER" >> $GITHUB_ENV

      # ---------- Artifacts (all OS) ----------
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.config }}
          path: |
            build/**/${{ env.CLIENT_TARGET_NAME }}*
            build/**/${{ env.SERVER_TARGET_NAME }}*
            build/**/*.exe
            build/**/*.dll
            build/**/*.dylib
            build/**/*.so
            build/**/${{ matrix.config }}/**
            build/**/compile_commands.json